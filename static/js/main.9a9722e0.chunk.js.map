{"version":3,"sources":["MuseoMarker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MuseoMarker","state","hasImg","alert","_this","setState","img","this","props","item","match","react_default","a","createElement","className","desc","onError","src","length","text","substring","target","href","id","phoneNumber","phone","concat","replace","address","url","site","m","Marker","position","location","lat","lon","Popup","name","topic","imgDesc","contact","Component","App","data","_this2","fetch","process","then","response","json","map","d","src_MuseoMarker","key","Map","center","zoom","maxZoom","TileLayer","attribution","react_leaflet_markercluster_min_default","markers","Boolean","window","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a9722e0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Marker, Popup } from \"react-leaflet\";\nimport Museo from \"./Museo\";\n\ninterface Props {\n  item: Museo;\n}\n\nconst imgUrl = \"http://www2.culture.gouv.fr/documentation/museo\";\nconst museoUrl =\n  \"http://www2.culture.gouv.fr/public/mistral/museo_fr?ACTION=CHERCHER&FIELD_98=REF&VALUE_98=\";\n\nclass MuseoMarker extends Component<Props> {\n  state = {\n    hasImg: true\n  };\n  componentWillMount() {\n    const img: string = this.props.item.img;\n    this.setState({ hasImg: img !== \"\" && !img.match(/logo8-v/g) });\n  }\n  imgDesc() {\n    if (this.state.hasImg) {\n      return (\n        <section>\n          <div className=\"left-50\">{this.img(this.props.item.img)}</div>\n          <div className=\"right-50\">{this.desc()}</div>\n        </section>\n      );\n    } else {\n      return <section>{this.desc()}</section>;\n    }\n  }\n  alert = () => {\n    this.setState({ hasImg: false });\n  };\n  img(img: string) {\n    return (\n      <img className=\"picto-musee\" onError={this.alert} src={imgUrl + img} />\n    );\n  }\n  desc() {\n    const length = this.state.hasImg ? 200 : 400;\n    let text = this.props.item.desc;\n    if (text.length > length) {\n      text = text.substring(0, length) + \"…\";\n    }\n    return (\n      <p className=\"description\">\n        {text}\n        <br />\n        <a target=\"_blank\" href={museoUrl + this.props.item.id}>\n          {\" \"}\n          En savoir plus\n        </a>\n      </p>\n    );\n  }\n  phone() {\n    const phoneNumber = this.props.item.phone;\n    if (!phoneNumber) {\n      return <span />;\n    }\n    return (\n      <span>\n        Tél :{\" \"}\n        <a href={`tel:${phoneNumber.replace(\"/s/g\", \"\")}`}>{phoneNumber}</a>\n      </span>\n    );\n  }\n  address() {\n    if (!this.props.item.address) {\n      return <span />;\n    }\n    return (\n      <span>\n        Adresse : <span>{this.props.item.address}</span>\n        <br />\n      </span>\n    );\n  }\n  site() {\n    if (!this.props.item.url) {\n      return <span />;\n    }\n    return (\n      <span>\n        Site :{\" \"}\n        <a href={this.props.item.url}>\n          {this.props.item.url.substring(0, 20) + \"…\"}\n        </a>\n      </span>\n    );\n  }\n  contact() {\n    return (\n      <address>\n        {this.address()}\n        <div className=\"left-50\">{this.phone()}</div>\n        <div className=\"right-50\">{this.site()}</div>\n      </address>\n    );\n  }\n  render() {\n    const m: Museo = this.props.item;\n    return (\n      <Marker position={[m.location.lat, m.location.lon]}>\n        <Popup>\n          <div className=\"title\">\n            <h4>{m.name}</h4>\n            <small>{m.topic}</small>\n          </div>\n          <div>\n            {this.imgDesc()}\n            {this.contact()}\n          </div>\n        </Popup>\n      </Marker>\n    );\n  }\n}\n\nexport default MuseoMarker;\n","import React, { Component } from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport \"./App.css\";\nimport Museo from \"./Museo\";\nimport MuseoMarker from \"./MuseoMarker\"\n\nclass App extends Component {\n  state = {\n    data: [] as Array<Museo>\n  };\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + \"/museo2.json\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ data });\n      });\n  }\n  markers() {\n    return this.state.data.map(d => <MuseoMarker key={d.id} item={d} />);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Map center={[46.8534, 2.3488]} zoom={6} maxZoom={50} className=\"Map\">\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          <MarkerClusterGroup>{this.markers()}</MarkerClusterGroup>\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}